object SyntPascalAnalyzer: TSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Default'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      FormatType = ftCustomFont
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Identifier'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Reserved word'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
    end
    item
      DisplayName = 'Preprocessor'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Assembler'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clNone
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = 15724510
      FormatType = ftBackGround
    end
    item
      DisplayName = 'Marked block'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clHighlightText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clHighlight
      FormatType = ftColor
    end
    item
      DisplayName = 'Interface section'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clHighlight
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = 15269887
      FormatType = ftBackGround
    end
    item
      DisplayName = 'Implemenation Section'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = 16121842
      FormatType = ftBackGround
    end
    item
      DisplayName = 'Function separator'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clRed
      FormatType = ftBackGround
    end
    item
      DisplayName = 'Current block'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      BgColor = 13369046
      FormatType = ftColor
      BorderTypeLeft = blSolid
      BorderColorLeft = clGray
      BorderTypeTop = blSolid
      BorderColorTop = clGray
      BorderTypeRight = blSolid
      BorderColorRight = clGray
      BorderTypeBottom = blSolid
      BorderColorBottom = clGray
    end
    item
      DisplayName = 'Current function'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = 15000804
      FormatType = ftBackGround
      BorderTypeLeft = blSolid
      BorderColorLeft = clRed
      BorderTypeTop = blSolid
      BorderTypeRight = blSolid
      BorderTypeBottom = blSolid
      MultiLineBorder = True
    end
    item
      DisplayName = 'Current Line'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = 16772341
      FormatType = ftBackGround
    end
    item
      DisplayName = 'Search Match'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindow
      Font.Height = -16
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      BgColor = clBlack
      FormatType = ftCustomFont
    end
    item
      DisplayName = 'Group (tree)'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Times New Roman'
      Font.Style = [fsBold, fsItalic]
      FormatType = ftCustomFont
    end
    item
      DisplayName = 'Intern. function (tree)'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'class (tree)'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end>
  TokenRules = <
    item
      DisplayName = 'Any name'
      StyleName = 'Identifier'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = #39'.*?('#39'|$)'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = 
        '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
        'ut exp. dot is required'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preprocessor 1'
      StyleName = 'Preprocessor'
      TokenType = 9
      Expression = '\{\$.*?\}'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preprocessor 2'
      StyleName = 'Preprocessor'
      TokenType = 9
      Expression = '\(\*\$.*?\*\)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)\(\*.*?(\*\)|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)\{.*?(\}|\Z)'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 3'
      StyleName = 'Comment'
      AlwaysEnabled = True
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'HEX'
      StyleName = 'Number'
      TokenType = 7
      Expression = '\$[a-f\d]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 8
      Expression = '\#(\d+|\$[\da-f]+)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Tag block rule 1'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abstract'
            'and'
            'array'
            'as'
            'asm'
            'begin'
            'case'
            'class'
            'const'
            'constructor'
            'contains'
            'destructor'
            'dispinterface'
            'div'
            'do'
            'downto'
            'dynamic'
            'else'
            'end'
            'except'
            'exports'
            'file'
            'finalization'
            'finally'
            'for'
            'function'
            'goto'
            'if'
            'implementation'
            'in'
            'index'
            'inherited'
            'initialization'
            'inline'
            'interface'
            'is'
            'label'
            'library'
            'mod'
            'nil'
            'not'
            'object'
            'of'
            'or'
            'out'
            'override'
            'package'
            'packed'
            'pascal'
            'private'
            'procedure'
            'program'
            'property'
            'protected'
            'public'
            'published'
            'raise'
            'read'
            'record'
            'register'
            'repeat'
            'requires'
            'resourcestring'
            'safecall'
            'set'
            'shl'
            'shr'
            'stdcall'
            'string'
            'then'
            'threadvar'
            'to'
            'try'
            'type'
            'unit'
            'until'
            'uses'
            'var'
            'virtual'
            'while'
            'with'
            'write'
            'xor')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Forward'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'forward'
            'of')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      TokenType = 10
      IgnoreAsParent = False
    end
    item
      DisplayName = 'begin'
      StyleName = 'Current block'
      ConditionList = <
        item
          TagList.Strings = (
            'begin'
            'case'
            'try')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'End'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      DrawStaple = True
      CollapseFmt = '%s0 ...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'End'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'until'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'until')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'repeat'
      ConditionList = <
        item
          TagList.Strings = (
            'repeat')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'until'
      DisplayInTree = False
      HighlightPos = cpBound
      DrawStaple = True
      CollapseFmt = 'repeat ...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
        end
        item
          TokenTypes = 2
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Implementation section'
      StyleName = 'Implemenation Section'
      StatesAdd = 2
      StatesRemove = 15
      ConditionList = <
        item
          TagList.Strings = (
            'implementation')
          TokenTypes = 4
          IgnoreCase = True
        end>
      EndOfTextClose = True
      Highlight = True
      DisplayInTree = False
      DynHighlight = dhRange
      HighlightPos = cpAny
      CollapseFmt = 'Implementation section'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Function separator'
      StyleName = 'Function separator'
      BlockType = btLineBreak
      ConditionList = <
        item
          TagList.Strings = (
            'constructor'
            'destructor'
            'function'
            'procedure')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'program'
      ConditionList = <
        item
          TagList.Strings = (
            'program'
            'unit')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'Unit end'
      EndOfTextClose = True
      NameFmt = '%s-1'
      HighlightPos = cpBound
      CollapseFmt = 'program ...'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'function'
      StyleName = 'Current function'
      ConditionList = <
        item
          TagList.Strings = (
            '('
            ';')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'function'
            'procedure')
          TokenTypes = 4
          IgnoreCase = True
        end>
      IdentIndex = -1
      BlockEnd = 'End of function'
      NameFmt = '%s0 %s-1'
      GroupFmt = 'Functions'
      RefToCondEnd = True
      DynHighlight = dhRange
      HighlightPos = cpRange
      CollapseFmt = '%s0 %s-1'
      TreeGroupStyle = 'Group (tree)'
      TreeItemImage = 0
      TreeGroupImage = 2
      IgnoreAsParent = False
    end
    item
      DisplayName = 'End of function'
      BlockName = 'function'
      StrictParent = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ';')
          TokenTypes = 1032
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = '('
      StyleName = 'Current block'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end>
      BlockEnd = ')'
      NotCollapsed = True
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpBoundTagBegin
      DynSelectMin = True
      IgnoreAsParent = False
    end
    item
      DisplayName = ')'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = '['
      StyleName = 'Current block'
      ConditionList = <
        item
          TagList.Strings = (
            '[')
          TokenTypes = 8
        end>
      BlockEnd = ']'
      NotCollapsed = True
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpBoundTagBegin
      DynSelectMin = True
      IgnoreAsParent = False
    end
    item
      DisplayName = ']'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ']')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'record'
      ConditionList = <
        item
          TagList.Strings = (
            'record')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            '=')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end>
      IdentIndex = -1
      BlockOffset = 2
      BlockEnd = 'end of type'
      NameFmt = '%s+2: %s0'
      GroupFmt = 'Types'
      HighlightPos = cpBound
      CollapseFmt = '%s+2: %s0'
      TreeGroupStyle = 'Group (tree)'
      TreeItemImage = 4
      TreeGroupImage = 2
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Enum'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            '=')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '.'
            ';'
            'type')
          CondType = tcMask
          TokenTypes = 14
        end>
      IdentIndex = 2
      BlockOffset = 2
      BlockEnd = ';'
      NameFmt = 'enum %s2'
      GroupFmt = 'Types'
      HighlightPos = cpBound
      CollapseFmt = 'enum %s2 ...'
      TreeItemImage = 4
      TreeGroupImage = 2
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Set'
      ConditionList = <
        item
          TagList.Strings = (
            'set')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            '=')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = ';'
      NameFmt = 'set %s0'
      GroupFmt = 'Types'
      RefToCondEnd = True
      HighlightPos = cpBound
      TreeItemImage = 4
      TreeGroupImage = 2
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Unit end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '.')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockOffset = 2
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'unit'
      ConditionList = <
        item
          TagList.Strings = (
            'unit')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'Unit end'
      EndOfTextClose = True
      NameFmt = '%s-1'
      HighlightPos = cpBound
      CollapseFmt = 'unit ...'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Uses'
      ConditionList = <
        item
          TagList.Strings = (
            'uses')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = ';'
      HighlightPos = cpAny
      CollapseFmt = 'uses ...'
      TreeGroupStyle = 'Group (tree)'
      TreeItemImage = 3
      TreeGroupImage = 2
      IgnoreAsParent = False
    end
    item
      DisplayName = ';'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ';')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'REGION'
      ConditionList = <
        item
          TagList.Strings = (
            '\{\$REGION')
          CondType = tcMask
          TokenTypes = 512
          IgnoreCase = True
        end>
      BlockEnd = 'REGION END'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%s0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'REGION END'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '\{\$ENDREGION')
          CondType = tcMask
          TokenTypes = 512
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'end of type'
      StatesRemove = 8
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ';')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      CancelNextRules = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'array declaration'
      ConditionList = <
        item
          TagList.Strings = (
            'array')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            '=')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end>
      IdentIndex = 2
      BlockOffset = 2
      BlockEnd = ';'
      NameFmt = '%s-2 %s0'
      GroupFmt = 'Types'
      RefToCondEnd = True
      HighlightPos = cpBound
      CollapseFmt = '%s-2 %s0'
      TreeGroupStyle = 'Group (tree)'
      TreeItemImage = 4
      TreeGroupImage = 2
      IgnoreAsParent = False
    end
    item
      DisplayName = 'var declaration'
      StatesAdd = 8
      ConditionList = <>
      BlockEnd = ';'
      NotCollapsed = True
      NameFmt = '%s0  : %s-2'
      GroupFmt = 'Variables/Constants'
      RefToCondEnd = True
      HighlightPos = cpBound
      CollapseFmt = '%s0: %s+1'
      GrammaRuleName = 'var_gram'
      TreeGroupStyle = 'Group (tree)'
      TreeItemImage = 4
      TreeGroupImage = 2
      IgnoreAsParent = True
    end>
  CodeTemplates = <
    item
      Name = 'be'
      Description = 'begin end'
      Code.Strings = (
        'begin'
        '  <caret>'
        'end;')
      Advanced = True
    end
    item
      Name = 'arrayd'
      Description = 'array declaration (var)'
      Code.Strings = (
        'array[0..|] of ;')
    end
    item
      Name = 'arrayc'
      Description = 'array declaration (const)'
      Code.Strings = (
        'array[0..|] of = ();')
    end
    item
      Name = 'cases'
      Description = 'case statement'
      Code.Strings = (
        'case | of'
        '  : ;'
        '  : ;'
        'end;')
    end
    item
      Name = 'casee'
      Description = 'case statement (with else)'
      Code.Strings = (
        'case | of'
        '  : ;'
        '  : ;'
        'else ;'
        'end;')
    end
    item
      Name = 'classf'
      Description = 'class declaration (all parts)'
      Code.Strings = (
        'T| = class(T)'
        'private'
        ''
        'protected'
        ''
        'public'
        ''
        'published'
        ''
        'end;')
    end
    item
      Name = 'classd'
      Description = 'class declaration (no parts)'
      Code.Strings = (
        'T| = class(T)'
        ''
        'end;')
    end
    item
      Name = 'classc'
      Description = 'class declaration (with Create/Destroy overrides)'
      Code.Strings = (
        'T| = class(T)'
        'private'
        ''
        'protected'
        ''
        'public'
        '  constructor Create; override;'
        '  destructor Destroy; override;'
        'published'
        ''
        'end;')
    end
    item
      Name = 'fors'
      Description = 'for (no begin/end)'
      Code.Strings = (
        'for | :=  to  do')
    end
    item
      Name = 'forb'
      Description = 'for statement'
      Code.Strings = (
        'for | :=  to  do'
        'begin'
        ''
        'end;')
    end
    item
      Name = 'function'
      Description = 'function declaration'
      Code.Strings = (
        'function |(): ;'
        'begin'
        ''
        'end;')
    end
    item
      Name = 'ifs'
      Description = 'if (no begin/end)'
      Code.Strings = (
        'if | then')
    end
    item
      Name = 'ifb'
      Description = 'if statement'
      Code.Strings = (
        'if | then'
        'begin'
        ''
        'end;')
    end
    item
      Name = 'ife'
      Description = 'if then (no begin/end) else (no begin/end)'
      Code.Strings = (
        'if | then'
        ''
        'else')
    end
    item
      Name = 'ifeb'
      Description = 'if then else'
      Code.Strings = (
        'if | then'
        'begin'
        ''
        'end'
        'else'
        'begin'
        ''
        'end;')
    end
    item
      Name = 'procedure'
      Description = 'procedure declaration'
      Code.Strings = (
        'procedure |();'
        'begin'
        ''
        'end;')
    end
    item
      Name = 'trye'
      Description = 'try except'
      Code.Strings = (
        'try'
        '  |'
        'except'
        ''
        'end;')
    end
    item
      Name = 'tryf'
      Description = 'try finally'
      Code.Strings = (
        'try'
        '  |'
        'finally'
        ''
        'end;')
    end
    item
      Name = 'trycf'
      Description = 'try finally (with Create/Free)'
      Code.Strings = (
        '|variable := typename.Create;'
        'try'
        ''
        'finally'
        '  variable.Free;'
        'end;')
    end
    item
      Name = 'whileb'
      Description = 'while statement'
      Code.Strings = (
        'while | do'
        'begin'
        ''
        'end;')
    end
    item
      Name = 'whiles'
      Description = 'while (no begin)'
      Code.Strings = (
        'while | do')
    end
    item
      Name = 'withb'
      Description = 'with statement'
      Code.Strings = (
        'with | do'
        'begin'
        ''
        'end;')
    end
    item
      Name = 'withs'
      Description = 'with (no begin)'
      Code.Strings = (
        'with | do')
    end
    item
      Name = 'prop'
      Description = 'property'
      Code.Strings = (
        'property | read  write;')
    end>
  SubAnalyzers = <>
  SampleText.Strings = (
    '//uses Unit2;'
    ''
    'type'
    '  rec = record'
    '  aa : Integer;'
    '  zzb,hhhf : String;'
    'end;'
    'var'
    '  a,b,c : Byte;'
    '  test : rec;'
    'const aa = 4;'
    '{a : TExtendedInfo;'
    'b : Integer;'
    's11,s22,s33 : String;  }'
    'function df(fff : Integer; aaaa : Byte) : Boolean;'
    'var x: Boolean;'
    ''
    'begin'
    ''
    'end;'
    ''
    'begin'
    ''
    '//test.aa := aa;'
    '{s11:='#39'a'#39';'
    's22:='#39'b'#39';'
    's33 := MergeStrings2(s11,s22);'
    'a := ExtendedInfo;'
    'b := a.MaxWeight;  }'
    ''
    'end.')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const'
    'Preprocessor'
    'Forward')
  Gramma.Gramma = 
    'arrayInheritedList = '#39'['#39' IdentList '#39']'#39';'#13#10'InheritedList = '#39'('#39' Ide' +
    'ntList '#39')'#39';'#13#10'IdentList = <Symbol> ('#39','#39' <Identifier>)*;'#13#10#13#10'var_gr' +
    'am = <Identifier> '#39':'#39' <Identifier>;'#13#10#13#10'FuncName = <Identifier>;'#13 +
    #10#13#10'FuncPathName = FuncName ('#39'.'#39' FuncName)*;'#13#10
  MarkedBlockStyle = 'Marked block'
  SearchMatchStyle = 'Search Match'
  CurrentLineStyle = 'Current Line'
  DefaultStyleName = 'Default'
  Extentions = 'pas'
  LexerName = 'Pascal Script'
  LineComment = '//'
  Left = 140
  Top = 344
end
